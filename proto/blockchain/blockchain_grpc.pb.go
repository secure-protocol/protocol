// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: blockchain.proto

package blockchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockchainServer_GenAddress_FullMethodName = "/blockchain.BlockchainServer/GenAddress"
	BlockchainServer_SendTo_FullMethodName     = "/blockchain.BlockchainServer/SendTo"
	BlockchainServer_Import_FullMethodName     = "/blockchain.BlockchainServer/Import"
	BlockchainServer_Balance_FullMethodName    = "/blockchain.BlockchainServer/Balance"
)

// BlockchainServerClient is the client API for BlockchainServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServerClient interface {
	GenAddress(ctx context.Context, in *GenAddressReq, opts ...grpc.CallOption) (*GenAddressRes, error)
	SendTo(ctx context.Context, in *SendToReq, opts ...grpc.CallOption) (*SendToRes, error)
	Import(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error)
	Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceRes, error)
}

type blockchainServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServerClient(cc grpc.ClientConnInterface) BlockchainServerClient {
	return &blockchainServerClient{cc}
}

func (c *blockchainServerClient) GenAddress(ctx context.Context, in *GenAddressReq, opts ...grpc.CallOption) (*GenAddressRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenAddressRes)
	err := c.cc.Invoke(ctx, BlockchainServer_GenAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServerClient) SendTo(ctx context.Context, in *SendToReq, opts ...grpc.CallOption) (*SendToRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendToRes)
	err := c.cc.Invoke(ctx, BlockchainServer_SendTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServerClient) Import(ctx context.Context, in *ImportReq, opts ...grpc.CallOption) (*ImportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportRes)
	err := c.cc.Invoke(ctx, BlockchainServer_Import_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServerClient) Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceRes)
	err := c.cc.Invoke(ctx, BlockchainServer_Balance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServerServer is the server API for BlockchainServer service.
// All implementations must embed UnimplementedBlockchainServerServer
// for forward compatibility.
type BlockchainServerServer interface {
	GenAddress(context.Context, *GenAddressReq) (*GenAddressRes, error)
	SendTo(context.Context, *SendToReq) (*SendToRes, error)
	Import(context.Context, *ImportReq) (*ImportRes, error)
	Balance(context.Context, *BalanceReq) (*BalanceRes, error)
	mustEmbedUnimplementedBlockchainServerServer()
}

// UnimplementedBlockchainServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockchainServerServer struct{}

func (UnimplementedBlockchainServerServer) GenAddress(context.Context, *GenAddressReq) (*GenAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenAddress not implemented")
}
func (UnimplementedBlockchainServerServer) SendTo(context.Context, *SendToReq) (*SendToRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTo not implemented")
}
func (UnimplementedBlockchainServerServer) Import(context.Context, *ImportReq) (*ImportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedBlockchainServerServer) Balance(context.Context, *BalanceReq) (*BalanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedBlockchainServerServer) mustEmbedUnimplementedBlockchainServerServer() {}
func (UnimplementedBlockchainServerServer) testEmbeddedByValue()                          {}

// UnsafeBlockchainServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServerServer will
// result in compilation errors.
type UnsafeBlockchainServerServer interface {
	mustEmbedUnimplementedBlockchainServerServer()
}

func RegisterBlockchainServerServer(s grpc.ServiceRegistrar, srv BlockchainServerServer) {
	// If the following call pancis, it indicates UnimplementedBlockchainServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockchainServer_ServiceDesc, srv)
}

func _BlockchainServer_GenAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServerServer).GenAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainServer_GenAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServerServer).GenAddress(ctx, req.(*GenAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainServer_SendTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServerServer).SendTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainServer_SendTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServerServer).SendTo(ctx, req.(*SendToReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainServer_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServerServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainServer_Import_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServerServer).Import(ctx, req.(*ImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainServer_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServerServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainServer_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServerServer).Balance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainServer_ServiceDesc is the grpc.ServiceDesc for BlockchainServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.BlockchainServer",
	HandlerType: (*BlockchainServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenAddress",
			Handler:    _BlockchainServer_GenAddress_Handler,
		},
		{
			MethodName: "SendTo",
			Handler:    _BlockchainServer_SendTo_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _BlockchainServer_Import_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _BlockchainServer_Balance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain.proto",
}
